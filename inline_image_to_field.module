<?php

// Modification on inline image to field, so save embedded images
// J.Kool - Integrative.it
//


/**
 * Implements hook_entity_presave().
 */

function base64_to_jpeg($base64_string, $output_file) {
    $retval = false;

    // Process only if it is an inline image (data:image/png)
    // If not, return false
    //
    if (substr($base64_string,0,14) === "data:image/png"){

      // split the string on commas
      // $data[ 0 ] == "data:image/png;base64"
      // $data[ 1 ] == <actual base64 string>
      //
      $data = explode( ',', $base64_string );

      // Drupal file_save_data to create file object
      //
      $retval=file_save_data( base64_decode( $data[1] ) , $output_file, "FILE_EXISTS_REPLACE");
    }
    // Return File object is sucessfull, FALSE if not.
    //
    return $retval;
}
function inline_image_to_field_entity_presave($entity) {
  // Get configuration settings.
  $settings = \Drupal::config('inline_image_to_field.settings');
  $type_id = $entity->getEntityTypeId();
  if (isset($type_id)) {
    // If the entity we are saving is a node type.
    if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface && !empty($settings)) {
      // Convert type to machine name.
      $type = $entity->bundle();
      // Get the correct settings for this type.
      $iitf_wysiwyg = $settings->get('iitf_wysiwyg_' . $type);
      $iitf_image = $settings->get('iitf_image_' . $type);
      // check that this bundle's field are set
      if ($iitf_wysiwyg == 'none' || $iitf_image == 'none') {
        return;
      }
      if (empty($iitf_wysiwyg) || empty($iitf_image)) {
        return;
      }
      // The list of files found embedded or liked in editor
      //
      $files = array();

      // get node UUID for filname construct
      //
      $nodeUUID = $entity->uuid->getValue()[0][value];

      // get inline image upload directory
      //
      $format = $entity->{$iitf_wysiwyg}->format ?: 'full_html';
      $editor_config = \Drupal::config('editor.editor.' . $format);
      $upload_dir = $editor_config->get('image_upload');

      // Get the current body text
      //
      $body = $entity->body->getValue();

      // PREG magic to Find all inline images
      //
      preg_match_all('~<img.*?src=["\']+(.*?)["\']+~',$body[0][value],$urls);

      // Walk through URL's
      //
      foreach ($urls[1] as $path){
        $filename = $upload_dir['directory'] . '/' . $nodeUUID.'-'.uniqid().'.png';
        $file = base64_to_jpeg($path, 'public://' . $filename);

        // If sucessfull save
        //
        if ($file != false) {

          // Replace the embedded image with link
          //
          $body[0][value] = str_replace($path,'/sites/default/files/'.$filename,$body[0][value]);

          // Add the file object to the files array
          //
          array_push($files,$file);

        }
      }

      // Put back the new body value
      //
      $entity->body = $body;

      // Match any image URL's.
      //
      preg_match_all('~<img.*?src=["\']+(.*?)["\']+~', $entity->{$iitf_wysiwyg}->value, $urls);
      $result = array();

      foreach ($urls[1] as $path) {

        // Query the database for any inline images that match this URL.
        //
        $filename = basename($path);
        $uri = 'public://' . $upload_dir['directory'] . '/' . urldecode($filename);
        $query = \Drupal::entityQuery('file');
        $query->condition('uri', $uri, '=');
        $result[] = $query->execute();
      }

      // Load each file and place in the files array.
      //
      foreach ($result as $f) {
        $files[] = entity_load('file', array_shift($f));
      }

      $existing_files = array();

      // Grab any existing files on the image field.
      //
      if (!empty($entity->{$iitf_image})) {
        foreach ($entity->{$iitf_image}->getIterator() as $image) {
          array_push($existing_files, $image->target_id);
        }
      }

      // Only add the file if it does not already exist on the image field.
      //
      foreach ($files as $file) {
        if (!in_array($file->fid->value, $existing_files)) {
          $entity->{$iitf_image}[] = $file;
        }
      }
    }
  }
}
